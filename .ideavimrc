"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Space as <leader>.

nnoremap <Space> <nop>
let mapleader=" "

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Basic options.
" See https://github.com/JetBrains/ideavim/wiki/%22set%22-commands
" for the List of Supported Set Commands.

set showmode
set scrolloff=5
set keymodel=startsel,stopsel
" set selectmode=mouse,key
" set ideavimsupport+=sigleline
set ideajoin
"set selection=exclusive
"set clipboard+=unnamed
set timeoutlen=3000
set startofline

set ignorecase
set smartcase
set incsearch
set iskeyword=@,48-57,_,128-167,224-235,-,?,!,:,<,>,*

set number

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Emulated Vim Plugins.
" See https://github.com/JetBrains/ideavim/wiki/Emulated-plugins.

set surround

let g:highlightedyank_highlight_color = "rgba(255, 246, 143, 255)"
let g:highlightedyank_highlight_duration = "1000"
set highlightedyank

set commentary

set matchit

set ReplaceWithRegister

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Basic mappings.

" Windows clipboard.
" There is no `smap` command so we use pair of vmap/xmap to create different
" mappings for visual and select modes.
nmap <C-C> "*yy
vmap <C-C> <C-G>"*y
xmap <C-C> "*y

" Toggle settings.
nmap <leader>// :set hlsearch!<CR>

" Expand selection.
" nmap + <Action>(EditorSelectWord)
" xmap + <Action>(EditorSelectWord)
" xmap _ <Action>(EditorUnSelectWord)

" Insert mode.
nmap <leader>i i<Space><Left>
nmap <leader>I i_<CR><Up><End><BS>
nmap <leader>o %a<CR>
nmap <leader>a %a

" Paste linewise.
nmap <leader>p :put<CR>
nmap <leader>P :-1put<CR>

" Insert new line in normal mode
nmap <leader><CR> i<CR><Esc>=%`^

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Operations with custom “text-objects”.

" % - custom match from the line start to the match end.
nnoremap <leader>vv ^v%
nnoremap <leader>yy ^y%
nnoremap <leader>dd ^v%dkJ+
nnoremap <leader>cc ^c%
nmap     <leader>== <leader>vv=
nmap     <leader>zf <leader>vvzf
nnoremap <leader>J} ^%-J``
nmap     <leader>JJ J<leader>==
nmap     <leader>J, A,<Esc><leader>JJ
nmap     <leader>J< <leader>J,
nmap     <leader>V  <Action>(EditorCodeBlockEndWithSelection)
nmap     <leader>D  <leader>V<Action>($Delete)
nmap     <leader>C  i<Action>(EditorCodeBlockEndWithSelection)<Action>($Delete)

" s - Empty lines.
nnoremap <leader>ds gEjVWkkD
nmap     <leader>cs <leader>d<Space>i

" , - the line until preceding comma.
nnoremap <leader>v, /.,\?$<CR>v?,$<CR>
nmap     <leader>y, <leader>v,y
nmap     <leader>d, <leader>v,d
nmap     <leader>c, <leader>v,c

" s - SQL statement.
nmap <leader>vs <Action>(sql.SelectCurrentStatement)<Action>(EditorSelectWord)<Action>(EditorSelectWord)

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Editor actions.

nmap <C-O>      <Action>(Back)
nmap <C-I>      <Action>(Forward)
imap <C-N>      <Action>(HippieBackwardCompletion)
imap <C-P>      <Action>(HippieCompletion)
nmap <leader>1  <Action>(SelectInProjectView)
nmap <leader>e  <Action>($LRU)
nmap <leader>*  <Action>(EditorSelectWord)<Action>(FindInPath)<Action>(EditorLeft)
vmap <leader>*  <Action>(FindInPath)<Action>(EditorLeft)
nmap <leader>gd <Action>(FindUsages)
nmap cd         <Action>(RenameElement)
nmap gD         <Action>(FindUsages)
nmap gf         <Action>(EditorSelectWord)<Action>(GotoFile)<Action>(EditorLeft)
vmap gf         <Action>(GotoFile)<Action>(EditorLeft)
nmap [m         <Action>(MethodUp)
nmap ]m         <Action>(MethodDown)
nmap [d         <Action>(GotoPrevElementUnderCaretUsage)
nmap ]d         <Action>(GotoNextElementUnderCaretUsage)
nmap [c         <Action>(VcsShowPrevChangeMarker)
nmap ]c         <Action>(VcsShowNextChangeMarker)
vmap zf         <Action>(CollapseSelection)<Esc>

command! Reload action IdeaVim.ReloadVimRc.reload

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Code helpers.

" Clojure comment form
nmap gc. i#_<Esc>`^<Action>(ReformatCode)

" Simple column alignment by previous line
nnoremap <leader><Tab><Space> 20i<Space><Esc>`[<Up>W<Down>dw
nnoremap <leader><Tab>,       ge20a,<Esc>`[l<Up>W<Down>hdwi<Space><Esc>`^

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" VIM & IDE Shortcuts

sethandler <C-A> a:ide
sethandler <C-B> a:ide
sethandler <C-C> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:ide i:vim
sethandler <C-F> a:ide
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <C-I> a:ide n:vim
sethandler <C-K> a:vim
sethandler <C-L> a:ide
sethandler <C-N> a:vim
sethandler <C-O> a:vim
sethandler <C-P> a:vim
sethandler <C-Q> a:ide n:vim
sethandler <C-R> a:ide i:vim
sethandler <C-S> a:ide
sethandler <C-U> a:vim
sethandler <C-V> a:ide
sethandler <C-W> a:ide i:vim
sethandler <C-X> a:ide
sethandler <C-Y> a:vim

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
