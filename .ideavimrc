"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
nnoremap <Space> <nop>
let mapleader=" "

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Basic options.
set showmode
set scrolloff=5
set keymodel=startsel,stopsel
" set selectmode=mouse,key
" set ideavimsupport+=sigleline
set ideajoin
"set selection=exclusive
"set clipboard+=unnamed
set timeoutlen=3000
set startofline

set ignorecase
set smartcase
set incsearch
set iskeyword=@,48-57,_,128-167,224-235,-,?,!,:,<,>,*

set number

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Emulated Vim Plugins.

set surround

let g:highlightedyank_highlight_color = "rgba(255, 246, 143, 255)"
let g:highlightedyank_highlight_duration = "1000"
set highlightedyank

set commentary

set ReplaceWithRegister

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Easy escape.
inoremap <A-I> <Esc>

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Move to first non-blank character on Up/Down.
nnoremap j +
nnoremap k -

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Minor improvements
nnoremap <Esc> ^
noremap  gl    $

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Windows clipboard.
" There is no `smap` command so we use pair of vmap/xmap to create different
" mappings for visual and select modes.
nmap <C-C> "*yy
vmap <C-C> <C-G>"*y
xmap <C-C> "*y

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
nmap <leader>/ :set hlsearch!<CR>

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" New line without entering insert mode, trimming trailing whitespace.
" nnoremap <C-M> i<CR><Esc><Up>:s/\s\+$//e<CR>+
nnoremap <C-M> i<CR><Esc>`^
nmap     <CR>  <C-M>

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Expand selection.
nmap <leader><C-W> <Action>(EditorSelectWord)
vmap <C-W>         <Action>(EditorSelectWord)
vmap <C-S-W>       <Action>(EditorUnSelectWord)
nmap +             <Action>(EditorSelectWord)
xmap +             <Action>(EditorSelectWord)
xmap _             <Action>(EditorUnSelectWord)

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Insert mode.
nmap     <leader>A   i_<CR><Up><End><BS>
nmap     <leader>o   %a<CR>
nmap     <leader>a   %a

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Paste linewise.
nmap <leader>p :put<CR>
nmap <leader>P :-1put<CR>

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Operations with custom “text-objects”.
" % - custom match from the line start to the match end
nnoremap <leader>vv ^v%
nnoremap <leader>yy ^y%
nnoremap <leader>dd ^v%dkJ+
nnoremap <leader>cc ^c%
nmap     <leader>== <leader>vv=
nmap     <leader>zf <leader>vvzf
nnoremap <leader>J} ^%-J``
nmap     <leader>JJ J<leader>==
nmap     <leader>J, A,<Esc><leader>JJ
nmap     <leader>J< <leader>J,
nmap     <leader>j  ^%j
nmap     <leader>k  k$%^
nmap     <leader>V  <Action>(EditorCodeBlockEndWithSelection)
nmap     <leader>D  <leader>V<Action>($Delete)
nmap     <leader>C  i<Action>(EditorCodeBlockEndWithSelection)<Action>($Delete)

" <Space> - Empty lines
nnoremap <leader>d<Space> gEjVWkkD
nmap     <leader>c<Space> <leader>d<Space>i
" , - the line until preceding comma
nnoremap <leader>v, /.,\?$<CR>v?,$<CR>
nmap     <leader>y, <leader>v,y
nmap     <leader>d, <leader>v,d
nmap     <leader>c, <leader>v,c
" s - SQL statement
nmap     <leader>vs <Action>(sql.SelectCurrentStatement)<Action>(EditorSelectWord)<Action>(EditorSelectWord)

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Editor actions.
nmap <C-O>      <Action>(Back)
nmap <C-I>      <Action>(Forward)
imap <C-N>      <Action>(HippieBackwardCompletion)
imap <C-P>      <Action>(HippieCompletion)
imap <S-Space>  <Action>(ExpandLiveTemplateCustom)
nmap <leader>1  <Action>(SelectInProjectView)
nmap <leader>*  <Action>(EditorSelectWord)<Action>(FindInPath)<Action>(EditorLeft)
vmap <leader>*  <Action>(FindInPath)<Action>(EditorLeft)
nmap <leader>gd <Action>(FindUsages)
nmap gf         <Action>(EditorSelectWord)<Action>(GotoFile)<Action>(EditorLeft)
vmap gf         <Action>(GotoFile)<Action>(EditorLeft)
nmap [m         <Action>(MethodUp)
nmap ]m         <Action>(MethodDown)
nmap [d         <Action>(GotoPrevElementUnderCaretUsage)
nmap ]d         <Action>(GotoNextElementUnderCaretUsage)
nmap [c         <Action>(VcsShowPrevChangeMarker)
nmap ]c         <Action>(VcsShowNextChangeMarker)
vmap zf         <Action>(CollapseSelection)<Esc>

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Code helpers.
" Clojure comment form
nnoremap <leader>gcf i#_<Esc>`^
" Simple column alignment by previous line
" nnoremap <leader><Tab><Space> 20i<Space><Esc>B<Up>vaW<Esc><Down>ldw
" nnoremap <leader><Tab>,       gE20a,<Esc>B<Up>vaW<Esc><Down>dwi<Space><Esc>`^
nnoremap <leader><Tab><Space> 20i<Space><Esc>`[<Up>W<Down>dw
nnoremap <leader><Tab>,       ge20a,<Esc>`[l<Up>W<Down>hdwi<Space><Esc>`^

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" Commands
command! Reload action IdeaVim.ReloadVimRc.reload

"•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
" VIM & IDE Shortcuts
sethandler <S- > a:vim
sethandler <C-A> a:ide
sethandler <C-B> a:ide
sethandler <C-C> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:ide
sethandler <C-F> a:ide
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:ide
sethandler <C-K> a:ide
sethandler <C-L> a:ide
sethandler <C-M> a:ide
sethandler <C-N> a:vim
sethandler <C-O> a:vim
sethandler <C-P> a:vim
sethandler <C-Q> a:vim
sethandler <C-R> a:vim
sethandler <C-S> a:ide
sethandler <C-U> a:vim
sethandler <C-V> a:ide
sethandler <C-W> a:vim
sethandler <C-S-W> a:vim
sethandler <C-X> a:ide
sethandler <C-Y> a:vim
sethandler <C-[> a:ide
sethandler <C-]> a:ide
